'use client';

import React, { useState, useEffect } from 'react';
import {
  ShieldExclamationIcon,
  BugAntIcon,
  ArrowPathIcon,
  ChartBarIcon,
  ComputerDesktopIcon,
  ClockIcon,
  CheckCircleIcon,
  XCircleIcon,
  ExclamationTriangleIcon,
  PlayIcon,
  DocumentTextIcon,
  ArrowDownTrayIcon,
  BeakerIcon,
  FireIcon
} from '@heroicons/react/24/outline';

interface Vulnerability {
  vulnerability_id: string;
  cve_id: string;
  title: string;
  description: string;
  severity: string;
  cvss_score: number;
  affected_version: string;
  fixed_version?: string;
  patch_available: boolean;
  exploit_available: boolean;
  published_date: string;
  last_updated: string;
  references: string[];
}

interface Asset {
  asset_id: string;
  name: string;
  type: string;
  ip_address: string;
  os_type: string;
  os_version: string;
  last_scan: string;
  vulnerability_count: number;
  critical_count: number;
  high_count: number;
  medium_count: number;
  low_count: number;
  patching_status: string;
}

interface ScanProgress {
  scan_id: string;
  total_assets: number;
  scanned_assets: number;
  vulnerabilities_found: number;
  status: string;
  started_at: string;
  estimated_completion?: string;
}

export default function VulnerabilityManagementPage() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [assets, setAssets] = useState<Asset[]>([]);
  const [scanProgress, setScanProgress] = useState<ScanProgress | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'vulnerabilities' | 'assets' | 'scanning'>('vulnerabilities');
  const [scanning, setScanning] = useState(false);

  const fetchVulnerabilities = async () => {
    try {
      const response = await fetch('/api/v1/vulnerability-management/vulnerabilities?limit=50');
      if (response.ok) {
        const data = await response.json();
        setVulnerabilities(data.vulnerabilities || []);
      }
    } catch (err) {
      setError('Failed to fetch vulnerabilities');
    }
  };

  const fetchAssets = async () => {
    try {
      const response = await fetch('/api/v1/vulnerability-management/assets?limit=50');
      if (response.ok) {
        const data = await response.json();
        setAssets(data.assets || []);
      }
    } catch (err) {
      setError('Failed to fetch assets');
    }
  };

  const checkScanProgress = async () => {
    try {
      const response = await fetch('/api/v1/vulnerability-management/scan/progress');
      if (response.ok) {
        const data = await response.json();
        setScanProgress(data);
        setScanning(data?.status === 'running');
      }
    } catch (err) {
      console.error('Failed to check scan progress:', err);
    }
  };

  const startScan = async (scanType: string = 'full') => {
    try {
      setScanning(true);
      const response = await fetch('/api/v1/vulnerability-management/scan/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ scan_type: scanType })
      });
      
      if (response.ok) {
        await checkScanProgress();
      }
    } catch (err) {
      console.error('Failed to start scan:', err);
      setScanning(false);
    }
  };

  const applyPatch = async (vulnerabilityId: string) => {
    try {
      const response = await fetch(`/api/v1/vulnerability-management/patch/${vulnerabilityId}`, {
        method: 'POST'
      });
      
      if (response.ok) {
        await fetchVulnerabilities();
      }
    } catch (err) {
      console.error('Failed to apply patch:', err);
    }
  };

  useEffect(() => {
    const loadData = async () => {
      await Promise.all([fetchVulnerabilities(), fetchAssets(), checkScanProgress()]);
      setLoading(false);
    };
    loadData();

    // Set up polling for scan progress
    const interval = setInterval(checkScanProgress, 5000);
    return () => clearInterval(interval);
  }, []);

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'text-red-500 bg-red-500/10 border-red-500/20';
      case 'high': return 'text-orange-500 bg-orange-500/10 border-orange-500/20';
      case 'medium': return 'text-yellow-500 bg-yellow-500/10 border-yellow-500/20';
      case 'low': return 'text-blue-500 bg-blue-500/10 border-blue-500/20';
      default: return 'text-gray-500 bg-gray-500/10 border-gray-500/20';
    }
  };

  const getPatchingStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'up_to_date': return 'text-green-400 bg-green-400/10';
      case 'patch_available': return 'text-yellow-400 bg-yellow-400/10';
      case 'critical_patches_needed': return 'text-red-400 bg-red-400/10';
      case 'patching_in_progress': return 'text-blue-400 bg-blue-400/10';
      default: return 'text-gray-400 bg-gray-400/10';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-indigo-900 p-6">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-white/10 rounded-lg w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="h-24 bg-white/10 rounded-lg"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  const totalVulns = vulnerabilities.length;
  const criticalVulns = vulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length;
  const highVulns = vulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length;
  const patchableVulns = vulnerabilities.filter(v => v.patch_available).length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-indigo-900 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-white flex items-center gap-3">
                <ShieldExclamationIcon className="h-8 w-8 text-purple-400" />
                Vulnerability Management
              </h1>
              <p className="text-gray-300 mt-2">
                Comprehensive vulnerability scanning and automated patching
              </p>
            </div>
            <div className="flex gap-3">
              <button
                onClick={() => startScan('quick')}
                disabled={scanning}
                className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2"
              >
                <BeakerIcon className="h-5 w-5" />
                Quick Scan
              </button>
              <button
                onClick={() => startScan('full')}
                disabled={scanning}
                className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors flex items-center gap-2"
              >
                {scanning ? (
                  <ArrowPathIcon className="h-5 w-5 animate-spin" />
                ) : (
                  <PlayIcon className="h-5 w-5" />
                )}
                {scanning ? 'Scanning...' : 'Full Scan'}
              </button>
            </div>
          </div>
        </div>

        {/* Scan Progress */}
        {scanProgress && scanProgress.status === 'running' && (
          <div className="bg-blue-600/20 border border-blue-400/30 rounded-lg p-4 mb-6">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-lg font-semibold text-blue-300">Scan in Progress</h3>
              <span className="text-sm text-blue-300">
                {scanProgress.scanned_assets}/{scanProgress.total_assets} assets scanned
              </span>
            </div>
            <div className="w-full bg-blue-900/50 rounded-full h-2 mb-2">
              <div 
                className="bg-blue-400 h-2 rounded-full transition-all duration-300"
                style={{ width: `${(scanProgress.scanned_assets / scanProgress.total_assets) * 100}%` }}
              ></div>
            </div>
            <div className="flex justify-between text-sm text-blue-300">
              <span>{scanProgress.vulnerabilities_found} vulnerabilities found</span>
              {scanProgress.estimated_completion && (
                <span>ETA: {new Date(scanProgress.estimated_completion).toLocaleTimeString()}</span>
              )}
            </div>
          </div>
        )}

        {/* Summary Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 border border-white/20">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-300">Total Vulnerabilities</p>
                <p className="text-2xl font-bold text-white">{totalVulns}</p>
              </div>
              <BugAntIcon className="h-8 w-8 text-red-400" />
            </div>
          </div>

          <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 border border-white/20">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-300">Critical & High</p>
                <p className="text-2xl font-bold text-red-400">{criticalVulns + highVulns}</p>
              </div>
              <ExclamationTriangleIcon className="h-8 w-8 text-red-400" />
            </div>
          </div>

          <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 border border-white/20">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-300">Patch Available</p>
                <p className="text-2xl font-bold text-green-400">{patchableVulns}</p>
              </div>
              <ArrowDownTrayIcon className="h-8 w-8 text-green-400" />
            </div>
          </div>

          <div className="bg-white/10 backdrop-blur-sm rounded-lg p-6 border border-white/20">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-300">Assets Monitored</p>
                <p className="text-2xl font-bold text-blue-400">{assets.length}</p>
              </div>
              <ComputerDesktopIcon className="h-8 w-8 text-blue-400" />
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white/10 backdrop-blur-sm rounded-lg border border-white/20">
          <div className="border-b border-white/20">
            <nav className="flex space-x-8 px-6">
              <button
                onClick={() => setActiveTab('vulnerabilities')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'vulnerabilities'
                    ? 'border-purple-400 text-purple-400'
                    : 'border-transparent text-gray-300 hover:text-white hover:border-gray-300'
                }`}
              >
                Vulnerabilities
              </button>
              <button
                onClick={() => setActiveTab('assets')}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'assets'
                    ? 'border-purple-400 text-purple-400'
                    : 'border-transparent text-gray-300 hover:text-white hover:border-gray-300'
                }`}
              >
                Assets
              </button>
            </nav>
          </div>

          {/* Vulnerabilities Tab */}
          {activeTab === 'vulnerabilities' && (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-white/5">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Vulnerability
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Severity
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      CVSS Score
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Patch Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Published
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-white/10">
                  {vulnerabilities.map((vuln) => (
                    <tr key={vuln.vulnerability_id} className="hover:bg-white/5 transition-colors">
                      <td className="px-6 py-4">
                        <div>
                          <p className="text-sm font-medium text-white">{vuln.title}</p>
                          <p className="text-xs text-gray-400">{vuln.cve_id}</p>
                          <p className="text-xs text-gray-500 mt-1 max-w-xs truncate">
                            {vuln.description}
                          </p>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                          {vuln.severity.toUpperCase()}
                        </span>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex items-center">
                          <span className="text-sm font-medium text-white mr-2">{vuln.cvss_score}</span>
                          <div className="w-16 bg-gray-700 rounded-full h-2">
                            <div 
                              className={`h-2 rounded-full ${
                                vuln.cvss_score >= 9 ? 'bg-red-400' :
                                vuln.cvss_score >= 7 ? 'bg-orange-400' :
                                vuln.cvss_score >= 4 ? 'bg-yellow-400' : 'bg-blue-400'
                              }`}
                              style={{ width: `${(vuln.cvss_score / 10) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex items-center gap-2">
                          {vuln.patch_available ? (
                            <CheckCircleIcon className="h-4 w-4 text-green-400" />
                          ) : (
                            <XCircleIcon className="h-4 w-4 text-red-400" />
                          )}
                          <span className="text-sm text-gray-300">
                            {vuln.patch_available ? 'Available' : 'Not Available'}
                          </span>
                          {vuln.exploit_available && (
                            <span className="text-xs text-red-400 font-medium">EXPLOIT</span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-300">
                        <div className="flex items-center gap-1">
                          <ClockIcon className="h-4 w-4" />
                          {new Date(vuln.published_date).toLocaleDateString()}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        {vuln.patch_available && (
                          <button
                            onClick={() => applyPatch(vuln.vulnerability_id)}
                            className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-xs transition-colors"
                          >
                            Apply Patch
                          </button>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              {vulnerabilities.length === 0 && (
                <div className="text-center py-12">
                  <BugAntIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-300">No vulnerabilities found</h3>
                  <p className="mt-1 text-sm text-gray-400">Run a vulnerability scan to detect security issues.</p>
                </div>
              )}
            </div>
          )}

          {/* Assets Tab */}
          {activeTab === 'assets' && (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-white/5">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Asset
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Operating System
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Vulnerabilities
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Patching Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
                      Last Scan
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-white/10">
                  {assets.map((asset) => (
                    <tr key={asset.asset_id} className="hover:bg-white/5 transition-colors">
                      <td className="px-6 py-4">
                        <div>
                          <p className="text-sm font-medium text-white">{asset.name}</p>
                          <p className="text-xs text-gray-400">{asset.ip_address}</p>
                          <p className="text-xs text-gray-500">{asset.type}</p>
                        </div>
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-300">
                        <div>
                          <p>{asset.os_type}</p>
                          <p className="text-xs text-gray-400">{asset.os_version}</p>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="flex flex-col gap-1">
                          <div className="flex items-center gap-4 text-sm">
                            <span className="text-red-400">{asset.critical_count} Critical</span>
                            <span className="text-orange-400">{asset.high_count} High</span>
                          </div>
                          <div className="flex items-center gap-4 text-sm">
                            <span className="text-yellow-400">{asset.medium_count} Medium</span>
                            <span className="text-blue-400">{asset.low_count} Low</span>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPatchingStatusColor(asset.patching_status)}`}>
                          {asset.patching_status.replace('_', ' ').toUpperCase()}
                        </span>
                      </td>
                      <td className="px-6 py-4 text-sm text-gray-300">
                        <div className="flex items-center gap-1">
                          <ClockIcon className="h-4 w-4" />
                          {new Date(asset.last_scan).toLocaleDateString()}
                        </div>
                        <div className="text-xs text-gray-400">
                          {new Date(asset.last_scan).toLocaleTimeString()}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>

              {assets.length === 0 && (
                <div className="text-center py-12">
                  <ComputerDesktopIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-300">No assets discovered</h3>
                  <p className="mt-1 text-sm text-gray-400">Run a scan to discover and analyze assets in your network.</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}