version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: secureshield-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secure_change_me}
      MYSQL_DATABASE: ${DB_NAME:-secureshield_pro}
      MYSQL_USER: ${DB_USER:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secure_change_me}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - secureshield-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-secure_change_me}"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: secureshield-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - secureshield-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: secureshield-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - secureshield-network
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: secureshield-backend
    restart: unless-stopped
    environment:
      - APP_NAME=SecureShield Pro
      - DEBUG=${DEBUG:-true}
      - SECRET_KEY=${SECRET_KEY:-development-secret-key-change-in-production}
      - DATABASE_URL=mysql+pymysql://${DB_USER:-root}:${DB_PASSWORD:-secure_change_me}@mysql:3306/${DB_NAME:-secureshield_pro}
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-secure_change_me}
      - DB_NAME=${DB_NAME:-secureshield_pro}
      - REDIS_URL=redis://redis:6379
      - OLLAMA_BASE_URL=http://ollama:11434
      - ENABLE_BACKGROUND_SCANS=true
    volumes:
      - ./backend:/app
      - scan_results:/app/var/scan_results
      - uploads:/app/var/uploads
    ports:
      - "8000:8000"
    networks:
      - secureshield-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      timeout: 10s
      retries: 5

  # Frontend UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: secureshield-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_NAME=SecureShield Pro
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - secureshield-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      timeout: 10s
      retries: 5

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: secureshield-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - secureshield-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      timeout: 10s
      retries: 5

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  scan_results:
    driver: local
  uploads:
    driver: local

networks:
  secureshield-network:
    driver: bridge